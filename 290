class Solution {
public:
    bool wordPattern(string pattern, string str) {
        unordered_map<char, string> char_map;
        unordered_map<string, char> word_map;

        stringstream s(str);
        string word;
        int n = pattern.size(), i = 0;

        while(s >> word)
        {
            if(i == n) return false;//pattern和str数量不对应，直接返回false
            char c = pattern[i];//将char从pattern里取出来命名为c
            if(char_map.count(c) != word_map.count(word)) return false;//如果内部映射关系不对应，则直接返回false
            if(char_map.count(c))
            {
                if((word_map[word] != c) || (char_map[c] != word)) return false;
            }
            else
            {
                char_map.insert({c, word});
                word_map.insert({word, c});
            }
            i++;
        }
        for (auto it = word_map.begin(); it != word_map.end(); ++it) {
        cout << it->first << " => " << it->second << endl;}
        for (auto it = char_map.begin(); it != char_map.end(); ++it) {
        cout << it->first << " => " << it->second << endl;}
    
        return i==n;
    }
};
