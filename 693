class Solution {
public: 

vector<string> topKFrequent(vector<string>& words, int k) {
        //if(words.size() == k) return words;

        unordered_map<string,int> word_map;
        vector<string> result;

       
        //words.sort(words.begin(), words.end(), compareStrings);
        
        for(string a : words)
        word_map[a] += 1;
        
        //cmp lambda
        auto cmp = [](const pair<string, int>& a, const pair<string, int>& b){
            return a.second == b.second ? a.first > b.first : a.second < b.second;
        };

        priority_queue<pair<string, int>, vector<pair<string, int>>, decltype(cmp)> PQ(cmp);

        for(pair p : word_map) PQ.push(p);

        for(int i = 0; i < k; ++i)
        {
            result.push_back(PQ.top().first);
            PQ.pop();
        }


        return result;
    }
};
